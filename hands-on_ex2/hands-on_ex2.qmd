---
title: "Choropleth Mapping with R"
---

## Importing functions into R 

```{r}
pacman::p_load(sf,tmap,tidyverse)
```

## Importing geospatial data into R

The code chunk below will use st_read() to import data into R and then examine the data

```{r}
mpsz = st_read(dsn="data/geospatial", layer="MP14_SUBZONE_WEB_PL")
mpsz
```

## Importing attribute data into R 

using the function read_csv() we we will import the attribute data

```{r}
popdata = read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

## Data preparation 

The data we are preparing should have year 2020 values. The data table should indicate the variables PA,SZ,YOUNG,ECONOMIC ACTIVE,AGED,TOTAL,DEPENDENCY

-   YOUNG: age group 0 to 4 until age group 20 to 24

-   ECONOMIC ACTIVE: age group 25-29 until age group 60-64

-   AGED: age group 65 and above

-   TOTAL: all age group

-   DEPENDENCY: the ratio between young and aged against economy active group

### Data Wrangling

the functions pivot_wider() of tidyr package and mutate(),filter(),group_by() and select() of dplyr package will be used

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

### Joining the attribute data and geospatial data

before a georelational join can be done, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields and made up of upper-and lowercase.

On the other hand, the SUBZONE_N and PLN_AREA_N are in uppercase.

```{r}
popdata2020 = popdata2020 %>%
  mutate_at(.vars = vars(PA,SZ),
            .funs = list(toupper)) %>%
  filter('ECONOMY ACTIVE' > 0)
```

next, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g SUBZONE_N and SZ as the common identifier

```{r}
mpsz_pop2020 = left_join(mpsz,popdata2020,
                         by = c("SUBZONE_N" = "SZ"))
```

```{r}
write_rds(mpsz_pop2020, "data/aspatial/mpszpop2020.rds")
```

## Choropleth Mapping Geospatial Data using tmap

two approaches can be used to prepare a thematic map using tmap, they are:

-   Plotting a thematic map quickly by using qtm()

-   Plotting highly customization thematic map by using tmap elements.

###  Plotting a thematic map quickly by using qtm()

The easiest way to draw a thematic map is using qtm()

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020,
    fill = "DEPENDENCY")
```

### Plotting highly customization thematic map by using tmap elements.

qtm() makes the aesthetics harder to control, high quality maps should be drawn with tmap elements

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style="quantile",
          palette="Blues",
          title="Dependency Ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame=TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size=2)+
  tm_scale_bar() +
  tm_grid(alpha=0.2)+
  tm_credits("Source: Planning sub-zone boundary from urban redevelopment authority (URA) \n and population data from DOS",
             position = c("left","bottom"))
```

### Drawing a base map 

The basic building block of a tmap is tm_shape() followed by one or more layer elements such as tm_fill() and tm_polygons()

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

### Drawing a choropleth map using tm_polygons()

to draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we need to assign the target variable such as dependency to tm_polygons()

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

### Drawing a choropleth map using tm_fill() and tm_border()

the code chunk below draws a choropleth map by using tm_fill() alone.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

to add the boundary of the planning subzones , tm_border() is used

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

alpha argument is used to define transparency number between 0 and 1.

other arguments include:

col= border color

lwd= border line width

lty = border line type

### Data classification methods of tmap

Most chotopleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

tmap provides 10 classifications: fixed,sd,equal,pretty(default),quantile,kmeans,hclust,bclust,fisher and jenks

### Plotting choropleth maps with built-in classification methods 

Using 5 classes

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

using equal data classification

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

### Plotting the choropleth map with custom breaks

We can put in our own custom breaks , do begin its best to start with some descriptive statistics

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

With reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)

We can plot the choropleth map by using the code chunk below

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

## Color Scheme

Using colorBrewer palette

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)

```

We can reverse the color shading by adding a - prefix

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

## Map Layouts

### Map Legend

in tmap, several legend options are provided to change the placement, format and appearance of the legend

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

Map style

tmap allows a wide variety of layout settings to be changed using tmap_style()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

### Cartographic Furniture 

Beside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

to reset the default style

```{r}
tmap_style("white")
```

## Drawing small multiple choropleth maps 

Small multiple maps also referred to as facet maps are composed of many maps placed side by side and sometimes stacked vertically.

in tmap small multiple maps can be plotted in three ways:

1.  by assigning multiple values to at least one of the aesthetic arguments
2.  by defining a group-by variable in tm_facets() and
3.  by creating multiple stand alone maps with tmap_arrange()

### By assigning multiple values to at least one of the aesthetic arguments 

Multiple maps created by defining ncols in tm_fill()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

### By defining a group by variable in tm_facets()

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

### By creating multiple stand-alone maps with tmap_arrange()

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

## Mapping spatial object meeting a selection criterion 

Instead of creating small multiple choropleth maps, we can also use selection function to map spatial objects meeting the selection criterion

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
