---
title: "Choropleth Mapping with R"
---

## Importing functions into R 

```{r}
pacman::p_load(sf,tmap,tidyverse)
```

## Importing geospatial data into R

The code chunk below will use st_read() to import data into R and then examine the data

```{r}
mpsz = st_read(dsn="data/geospatial", layer="MP14_SUBZONE_WEB_PL")
mpsz
```

## Importing attribute data into R 

using the function read_csv() we we will import the attribute data

```{r}
popdata = read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

## Data preparation 

The data we are preparing should have year 2020 values. The data table should indicate the variables PA,SZ,YOUNG,ECONOMIC ACTIVE,AGED,TOTAL,DEPENDENCY

-   YOUNG: age group 0 to 4 until age group 20 to 24

-   ECONOMIC ACTIVE: age group 25-29 until age group 60-64

-   AGED: age group 65 and above

-   TOTAL: all age group

-   DEPENDENCY: the ratio between young and aged against economy active group

### Data Wrangling

the functions pivot_wider() of tidyr package and mutate(),filter(),group_by() and select() of dplyr package will be used

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

### Joining the attribute data and geospatial data

before a georelational join can be done, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields and made up of upper-and lowercase.

On the other hand, the SUBZONE_N and PLN_AREA_N are in uppercase.

```{r}
popdata2020 = popdata2020 %>%
  mutate_at(.vars = vars(PA,SZ),
            .funs = list(toupper)) %>%
  filter('ECONOMY ACTIVE' > 0)
```

next, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g SUBZONE_N and SZ as the common identifier

```{r}
mpsz_pop2020 = left_join(mpsz,popdata2020,
                         by = c("SUBZONE_N" = "SZ"))
```

```{r}
write_rds(mpsz_pop2020, "data/aspatial/mpszpop2020.rds")
```

## Choropleth Mapping Geospatial Data using tmap

two approaches can be used to prepare a thematic map using tmap, they are:

-   Plotting a thematic map quickly by using qtm()

-   Plotting highly customization thematic map by using tmap elements.

###  Plotting a thematic map quickly by using qtm()

The easiest way to draw a thematic map is using qtm()

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020,
    fill = "DEPENDENCY")
```

### Plotting highly customization thematic map by using tmap elements.

qtm() makes the aesthetics harder to control, high quality maps should be drawn with tmap elements

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style="quantile",
          palette="Blues",
          title="Dependency Ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame=TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size=2)+
  tm_scale_bar() +
  tm_grid(alpha=0.2)+
  tm_credits("Source: Planning sub-zone boundary from urban redevelopment authority (URA) \n and population data from DOS",
             position = c("left","bottom"))
```

### Drawing a base map 

The basic building block of a tmap is tm_shape() followed by one or more layer elements such as tm_fill() and tm_polygons()

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

### Drawing a choropleth map using tm_polygons()

to draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we need to assign the target variable such as dependency to tm_polygons()

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```
