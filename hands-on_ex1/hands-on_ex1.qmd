---
title: "hands-on exercise1: geospatial data wrangling with R"
---

## Overview

In this hands on exercise, I learn how to import and wrangling geospatial data using appropriate R packages

## Getting Started

The code chunk below installs and loads the packages sf and tidyverse into the environment.

```{r}
pacman::p_load(sf,tidyverse)

```

## import geospatial data

### importing polygon feature data

```{r}
mpsz = st_read(dsn="data/geospatial" , layer="MP14_SUBZONE_WEB_PL")
```

### Importing polyline feature data in shapefile form

```{r}
cyclingpath = st_read(dsn="data/geospatial", layer= "CyclingPathGazette")
```

### Importing GIS data in kml format

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

## Checking the content of a simple feature data frame

In this sub section , I will learn different ways to retrieve information related to the content of a simple feature data frame.

### Working with st_geometry()

```{r}
st_geometry(mpsz)
glimpse(mpsz)
head(mpsz, n=5)
```

### Plotting the Geospatial data

```{r}
plot(mpsz)
```

the function will plot different attributes upto a reasonable amount, we can also choose to plot only the geometry.

```{r}
plot(st_geometry(mpsz))
```

we can also choose to plot the sf object by using a specific attribute as shown below

```{r}
plot(mpsz["PLN_AREA_N"])
```

## Working with projection

there are different coordinate systems that exist, to change the coordinate systems of the data sets is a process called **projection transformation.**

### Assigning EPSG code to a simple feature data frame

st_crs() will help an example of the data

```{r}
st_crs(mpsz)
```

although the frame is projected in svy21 but when the end of the print is read, it indicates the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.

To correct this we can use st_set_crs() of sf package as shown below where a new variable mpsz3414 has the corrected EPSG code.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

now, if we check the CSR again

```{r}
st_crs(mpsz3414)
```

it can be seen that the EPSG code has been changed to 3414 now.

## Transforming the projection of data

We transform the projection of preschool from wgs84 to svy21

In geospatial analysis, it is common to transform data from geographic coordinate system to projected coordinate system. Geographic coordinate system is not appropriate if the analysis needs to use distance and/or area measurements. To transform we use the code below

```{r}
preschool3414 = st_transform(preschool, crs = 3414)
```

## Importing Aspatial data

we will use read_csv() function to read the aspatial data. The output R object is a tibble data frame

```{r}
listings = read_csv("data/aspatial/listings.csv" , show_col_types = FALSE)
```

to examine the data post upload, we use:

```{r}
list(listings)
```

### Creating a simple feature data frame from an aspatial data frame

the code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages

```{r}
listings_sf = st_as_sf(listings,
                       coords = c("longitude" , "latitude"),
                       crs=3414) %>% 
  st_transform(crs = 3414)
```

lets take a glimpse into listings_sf

```{r}
glimpse(listings_sf)
```

## Geoprocessing with sf package

besides providing functions to handle, geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions

In this section I learnt how to perform two commonly used geoprocessing functions called buffering and point in polygon count.

### Buffering

In this scenario the authority is planning to upgrade the existing cycling path. They need to acquire 5 meters of reserved land on both sides of the current cycling path. To determine the extent of the land that needs to be acquired and its total area we can use a function called st_buffer()

```{r}
buffer_cycling = st_buffer(cyclingpath, dist=5, nQuadSegs=30)
```

this is followed by calculating the area of the buffers as shown in the code chunk below

```{r}
buffer_cycling$AREA = st_area(buffer_cycling)
```

lastly, sum() of base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

i.e 1774367 sq. mt. land will have to be acquired for the upgrade work.

### Point in polygon count

The scenario here is that a pre school service group wants to find out the number of pre-schools in each planning sub zone.

The solution is to perform two operations at one go. Firstly, to identify pre schools located inside each planning sub zone by using st_intersects(). Next, length() of Base R is used to calculate numbers of preschools that fall inside each planning sub zone.

```{r}
mpsz3414$'PreSch Count'= lengths(st_intersects(mpsz3414, preschool3414))
```

to see the summary statistics we can use:

```{r}
summary(mpsz3414$'PreSch Count')
```

To list the planning sub zone with the most number of pre schools, the top_n() of dplyr package is used as shown in the code chunk below

```{r}
top_n(mpsz3414,1,'PreSch Count')
```

To calculate the density of pre school by planning sub zone we firstly calculate the area of each planning zone using st_area()

```{r}
mpsz3414$Area = mpsz3414 %>%
  st_area()
```

next, mutate() of dplyr package is used to compute the density by using the code chunk below

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)

```

## Exploratory Data Analysis (EDA)

In practice, many geospatial analytics start with EDA. In this section I learn how to use appropriate ggplot2 functions to create functional yet truthful statistical graphs for EDA purposes.

First , I plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R graphics will be used as shown in the code chunk below

```{r}
hist(mpsz3414$'PreSch Density')
```

The output is far from meeting publication quality , we use ggplot2 to plot another histogram

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

Using ggplot 2 method , a scatter plot is plotted showing the relationship between pre school density and pre school count

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
