---
title: "Week 2 Exercise 1 - Spatial Weights and Applications"
---

```{r}
pacman::p_load(sf,spdep,tmap,tidyverse,knitr)
```

## Importing Data 

we import data using st_read() function below

```{r}
hunan = st_read(dsn="data/geospatial" , layer="Hunan")
```

We also import the CSV file using read_csv() function

```{r}
hunan2012 = read_csv("data/aspatial/Hunan_2012.csv")
```

### Performing relational join

The code chunk below will be used to update the attribute table of hunan's SpatialPolygonDataFrame with attribute fields of hunan2012 data frame. We use left_join() of dplyr package.

```{r}
hunan = left_join(hunan,hunan2012) %>%
  select(1:4,7,15)
```

## Visualizing Regional Development Indicator

We prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package

```{r}
basemap = tm_shape(hunan)+
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc = qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1 , ncol=2)
```

## Computing Contiguity Spatial Weights 

In this section we use poly2nm() of spdep package to compute contiguity weight matrices for the study area.

### Computing (QUEEN) contiguity based neighbors 

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

for each polygon in our polygon object, wm_q lists all neighboring polygons.

```{r}
wm_q[[1]]
```

We can retrieve the country name of polygon ID=1 by using the code chunk below

```{r}
hunan$County[1]
```

To reveal the country names of the five neighboring polygons, the code chunk will be used:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

We can receive the GDPPC of these five countries by using the code chunk below

```{r}
nb1 = wm_q[[1]]
nb1 = hunan$GDPPC[nb1]
nb1
```

We can display the complete weight matrix by using str()

```{r}
str(wm_q)
```

## Creating (ROOK) contiguity based neighbors

The code chunk below is used to compute Rook contiguity weight matrix

```{r}
wm_r = poly2nb(hunan,queen=FALSE)
summary(wm_r)
```

### Visualizing contiguity weights

A connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids

We will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation

To get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

we do the same for latitude with one difference, we access the second value per each centroid with \[\[2\]\].

```{r}
latitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now we put them in the same object

```{r}
coords <- cbind(longitude, latitude)
```

We can check the first few observations

```{r}
head(coords)
```

### Plotting Queen contiguity based neighbors map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### Plotting Rook contiguity based neighbors map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### Plotting both Queen and Rock contiguity based neighbors maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

## Computing distance based neighbors

In this section we derive distance-based weight matrices by using dnearneigh() of spdep package

The function identifies neighbors of region points by Euclidean distance with a distance band with lower d1 and upper d2 bounds controlled by the bounds argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

### Determining the cut-off distance 

Firstly the upper limit for distance band is calculated using the steps below:

1.  Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.
2.  Then we convert the knn object returned by knearneigh() into a neighbors list of class nb with a list of integer vectors containing neighbot region number ids by using knn2nb()
3.  Return the length of neighbor relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.
4.  Remove the list structure of the returned object by using unlist()

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

### Computing fixed distance weight matrix

Then we compute the distance weight matrix by using dnearigh() as shown in the code below

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Average number of neighboring regions for each region in the data set.

Next, we will use str() to display the content of em_d62 weight matrix

```{r}
str(wm_d62)
```

One more way to display the structure of the weight matrix is to combine table() and card() of spdep.

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp = n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

### Plotting fixed distance weight matrix 

We plot the distance weight matrix by using the code chunk below

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of the 1st nearest neighbors and the black lines show the links of the neighbors within the cut-off distance of 62km.

Alternatively, we can plot both of them next to each other by using the code below

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

### Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

We can display the content of matrix by using str()

```{r}
str(knn6)
```

### Plotting distance based neighbors 

We can plot the weight matrix using the code chunk below

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weights based on IDW

In this section we learn how to derive a spatial weight matrix based on inversed distance method

First, we compute the distances between areas by using nbdists() of spdep

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## Row Standardized weights matrix 

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=\"W\")

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

the zero.policy option allows for lists of non neighbors if set to TRUE.

to see the weight of the first polygon's eight neighbors type

```{r}
rswm_q$weights[10]
```

Using the same method we can derive a row standardized distance weight matrix by using the code chunk below

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## Application of spatial weights matrix

We compute the average neighbor GDPPC value for each polygon, they are often referred to as spatially lagged values

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

we retrieve the GDPPC of the five countries using

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

We append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The following table shows the average neighboring income values (stored in the inc.lag object) for each country

```{r}
head(hunan)
```

Next we plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### Spatial lag as a sum of neighboring values 

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist in the nb2listw function to explicitly assign these weights.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
lag_sum
```

 we will append the *lag_sum GDPPC* field into hunan sf data frame by using the code chunk below.

```{r}
hunan = left_join(hunan, lag.res)
```

We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code below

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
```

We look at the neighbor list of area \[1\] by using code below

```{r}
wm_qs[[1]]
```

we obtain weights

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

We need to create the lag variable from our wight structure and DGPPC variable

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

We convert the lag variable list object into a data frame

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

the code chunk below will be used to append *lag_window_avg GDPPC* values onto *hunan* sf data.frame by using *left_join()* of **dplyr** package.

```{r}
hunan = left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.\

```{r}
hunan %>%
  select("County", "lag GDPPC", "lag_window_avg GDPPC") %>%
  kable()
```

lastly we plot the lag_gdppc and w_avg_gdppc maps next to each other

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### Spatial window sum

Spatial window sum is the counter part of the window average, but without using row standardised weights

to add diagonal element to the neighbor list , we need just need to use the include.self() from spdep.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Next, we assign binary weights to the neighbor structure that includes the diagonal element

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

we use nb2listw() and glist() to explicitly assign weight values

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the new weight structure we can compute the lag variable with lag.listw()

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

we convert the lag variable list object into a data frame by using as data frame()

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")

```

The code chunk below will be used to append w_sum GDPPC values onto hunan sf data frame using left_join() of dplyr package

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Lastly, *qtm()* of **tmap** package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
